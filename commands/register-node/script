#!/usr/bin/env bash

# To implement this command, edit the "Command implementation" section below. 

# Usage
# -----

# Comments prefixed with `#/` are managed by stubbs.
# The `command` and `usage` comments describe the command
# and show its options.
# 
#/ command: chef-solo:register-node: "Register the local node with a Chef server"
#/ usage: rerun chef-solo:register-node  --key-repo-url <>  --key-repo-id <>  --key-repo-username <>  --key-repo-password <>  --chef-server <> 

# Load common functions
# ---------------------

# Load the function library for this module.
# This loads rerun functions, too.
. $RERUN_MODULE_DIR/lib/functions.sh register-node || { 
  echo >&2 "Failed loading function library." ; exit 1 ; 
}

# Error handling
# ---------------

# This script is designed to _fail-fast_.

# Trap errors and exit. The call to `rerun_die` will print the
# the error message and exit with the error command exit status. 

trap 'rerun_die $? "*** command failed: chef-solo:register-node. ***"' ERR

# Run [set] `nounset` to treat unset variables as errors. Set [pipefail]
# so a pipeline return status is the value of the last 
# (rightmost) command to exit with non-zero status.
#
# [set]: http://ss64.com/bash/set.html
# [pipefail]: http://www.gnu.org/software/bash/manual/html_node/Pipelines.html

set -o nounset -o pipefail

# Command variables
# -----------------

# This command script can access the following variables
# declared by `rerun` or by the option parser function.

#/ rerun-variables: RERUN, RERUN_VERSION, RERUN_MODULES, RERUN_MODULE_DIR
#/ option-variables: KEY_REPO_URL KEY_REPO_ID KEY_REPO_USERNAME KEY_REPO_PASSWORD CHEF_SERVER

# The `rerun_options_parse` function processes the command line
# arguments. Each accepted command line flag results in setting 
# one the corresponding option variables.

rerun_options_parse "$@"


# Command implementation
# ----------------------

#options
#KEY_REPO_URL="http://artifactory.dev4.rms.com:8081/artifactory"
#KEY_REPO_ID="keys-local"
#KEY_REPO_USERNAME=admin
#KEY_REPO_PASSWORD=password
#CHEF_SERVER=ip-10-80-137-106

#hardcode see lib/functions.sh
#CHEF_VALIDATION_GROUP_ID="com.rms.chef.validation"
#CHEF_VALIDATION_ARTIFACT_VERSION="LATEST"
#CHEF_VALIDATION_ARTIFACT_FORMAT="pem"
#CHEF_VALIDATION_ARTIFACT_FILE="/etc/chef/validation.pem"


CHEF_SERVER_URL=http://${CHEF_SERVER}:4000

CHEF_CLIENT="$(which /usr/bin/chef-client)"
if [ -z "$(which chef-client)" ]
then
   rerun_die "Unable to find the chef-client command"
fi



#
#example location to a validation pem key for a chef server in the key repository:
#   http://artifactory.dev4.rms.com:8081/artifactory/simple/keys-local/com/rms/chef/validation/ip-10-80-137-106/LATEST/ip-10-80-137-106-LATEST.pem
#
CHEF_SERVER_PEM_URL=${KEY_REPO_URL}/simple/${KEY_REPO_ID}/$(echo ${CHEF_VALIDATION_GROUP_ID} |tr '.' '/')/${CHEF_SERVER}/${CHEF_VALIDATION_ARTIFACT_VERSION}/${CHEF_SERVER}-${CHEF_VALIDATION_ARTIFACT_VERSION}.pem

#
# download and install the validation key from the key repository
#
validationTmp=$(mktemp)
curl -fLsk -o "${validationTmp}" "${CHEF_SERVER_PEM_URL}" || rerun_die "unable to download ${CHEF_SERVER_PEM_URL}"
sudo cp "${validationTmp}" /etc/chef/validation.pem 
sudo chmod 600 /etc/chef/validation.pem 
rm -f "${validationTmp}"

clientRbTmp=$(mktemp)
cp ${RERUN_MODULE_DIR}/lib/client.rb ${clientRbTmp}
sed -i "s/@CHEF_SERVER@/${CHEF_SERVER}/g" ${clientRbTmp}
sudo cp ${clientRbTmp} /etc/chef/client.rb
rm -f ${clientRbTmp}

#
# execute the chef-client and register the node
#
sudo chef-client


# Done. Exit with last command exit status.
exit $?

